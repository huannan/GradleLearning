apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.nan.myplugin'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.nan.androidgradleprimer"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode appversionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 配置那些资源打包到 Apk 中
        resConfigs 'zh'
    }

    buildTypes {
        release {
            // 自动清理未使用资源，可以配置keep.xml来定制规则
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }

    // 多渠道打包
    // 维度
    flavorDimensions "channel"
    productFlavors {
        flyme {
            dimension "channel"
            manifestPlaceholders.put("CHANNEL", "flyme")
            // 自定义BuildConfig
            buildConfigField 'String', 'URL', '"http://www.flyme.com"'
            // 动态添加自定义资源
            resValue 'string', 'welcome', 'flyme'
        }
        baidu {
            dimension "channel"
            manifestPlaceholders.put("CHANNEL", "baidu")
            buildConfigField 'String', 'URL', '"http://www.baidu.com"'
            resValue 'string', 'welcome', 'baidu'
        }
    }

    // 渠道的名称是一致的，可以通过遍历很方便的完成渠道名称的替换
    /*
    productFlavors.all { flavor ->
        manifestPlaceholders.put("CHANNEL", "flyme")
    }
    */

    /**
     * 修改打包生成的apk的文件名
     */
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') &&
                    'release' == variant.buildType.name) {
                //输出文件名
                outputFileName = "AndroidGradleProject_v${variant.versionName}_${buildTime()}.apk"
            }
        }
    }

    // 隐藏签名文件配置，使用主机上面的环境配置
    signingConfigs {
        //读取配置的与签名文件信息对应的环境变量
        def appStoreFile = System.getenv('STORE_FILE')
        def appStorePassword = System.getenv('STORE_PASSWORD')
        def appKeyAlias = System.getenv('KEY_ALIAS')
        def appKeyPassword = System.getenv('KEY_PASSWORD')
        //如果获取不到相关签名文件信息，则使用默认的签名文件
        if (!appStoreFile || !appStorePassword || !keyAlias || !keyPassword) {
            appStoreFile = "debug.keystore"
            appStorePassword = "android"
            appKeyAlias = "androiddebugkey"
            appKeyPassword = "android"
        }
        release {
            storeFile file(appStoreFile)
            storePassword appStorePassword
            keyAlias appKeyAlias
            keyPassword appKeyPassword
        }
        debug {
            //默认情况下，debug模式下的签名已配置为Android SDK自动生成的debug签名文件证书
            //.android/debug.keystore
        }
    }

    // //配置Java编译选项
    compileOptions {
        //设置源文件的编码
        encoding = 'utf-8'
        //设置Java源代码的编译级别()
        sourceCompatibility = JavaVersion.VERSION_1_8
        //设置Java字节码的版本
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    // adb配置选项
    adbOptions {
        //设置执行adb命令的超时时间
        timeOutInMs = 5 * 1000
        /**
         * 设置adb install安装这个操作的设置项
         * -l:锁定应用程序
         * -r:替换已存在的应用程序
         * -t:允许测试包
         * -s:把应用程序安装到SD卡上
         * -d:允许应用程序降级安装
         * -g:为该应用授予所有运行时的权限
         */
        installOptions '-r', '-d'
    }

    //DEX选项配置
    dexOptions {
        //设置是否启用dx增量模式
        incremental true
        //设置执行dx命令为其分配的最大堆内存
        javaMaxHeapSize '4g'
        //设置是否开启jumbo模式，如果项目方法数超过65535，需要开启jumbo模式才能构建成功
        jumboMode true
        //设置Android Gradle运行dx命令时使用的线程数量，可提高dx执行的效率
        threadCount 2
        /**
         * 设置是否执行dex Libraries库工程,开启后会提高增量构建的速度，会影响clean的速度，默认为true
         * 使用dx的--multi-dex选项生成多个dex,为避免和库工程冲突，可设置为false
         */
        preDexLibraries true
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'com.nan.mylibrary:mylibrary:1.0.0-SNAPSHOT'
}

//当前时间
def static buildTime() {
    def date = new Date()
    return date.format("yyyMMdd")
}